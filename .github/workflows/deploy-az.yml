name: Deploy to azure

on: 
  workflow_dispatch:
    inputs:
      purge:
        description: 'Delete az infrastructure'
        required: false
        type: boolean

env:
  REGISTRY: ghcr.io
  NAMESPACE: austriandatalab
  SUB_NAMESPACE: indiegamestream
  LABEL: sha-f641ffb9ebff0a3f8c8f9b968bfd50f83a316370
jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.purge == 'false' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Install Helm
        uses: azure/setup-helm@v4.2.0
        with:
          version: 'latest'
        id: install1

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
        id: install2


      - name: Login to Azure
        run: az login --service-principal -u ${{ secrets.CLIENT_ID }} -p ${{ secrets.CLIENT_SECRET }} --tenant ${{ secrets.AZURERM_TENANT_ID }}


      - name: Terraform Apply
        working-directory: ./iac
        run: |
          export ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
          export ARM_CLIENT_ID=${{ secrets.CLIENT_ID }}
          export TF_VAR_subscription_id=${{ secrets.AZURERM_SUBSCRIPTION_ID }}
          export TF_VAR_tenant_id=${{ secrets.AZURERM_TENANT_ID }}
          export TF_CLI_ARGS_init=" -backend-config=\"resource_group_name=${{ secrets.AZURERM_RESOURCE_GROUP_NAME }}\"  -backend-config=\"key=${{ secrets.KEY }}.tfstate\" -backend-config=\"storage_account_name=${{ secrets.AZURERM_STORAGE_ACCOUNT_NAME }}\"    -backend-config=\"container_name=tfbootstrapadmin\"   -backend-config=\"subscription_id=${{ secrets.AZURERM_SUBSCRIPTION_ID }}\"  -backend-config=\"tenant_id=${{ secrets.AZURERM_TENANT_ID }}\" "
          terraform init
          terraform plan -out=tfplan.bin -input=false
          terraform apply -auto-approve "tfplan.bin"
      - name: Apply tailscale operator
        working-directory: ./iac
        run: |
          az aks command invoke -n ${{ secrets.AZURERM_AKS_CLUSTER_NAME }} -g rg-service-not2day --command "helm uninstall tailscale-operator --namespace=tailscale || true"
          az aks command invoke -n ${{ secrets.AZURERM_AKS_CLUSTER_NAME }} -g rg-service-not2day --command "helm repo add tailscale https://pkgs.tailscale.com/helmcharts && helm repo update && helm upgrade --install tailscale-operator tailscale/tailscale-operator --namespace=tailscale --create-namespace --set-string oauth.clientId=${{secrets.TAILSCALE_CLIENT_ID}} --set-string oauth.clientSecret=${{secrets.TAILSCALE_CLIENT_SECRET}} --set-string apiServerProxyConfig.mode=true --wait"
      - name: Connect to tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{secrets.TAILSCALE_CLIENT_ID_2}}
          oauth-secret: ${{secrets.TAILSCALE_CLIENT_SECRET_2}}
          tags: tag:ci
      - name: Configure kubernetes config
        run: tailscale configure kubeconfig tailscale-operator

      - name: Check working cluster
        run: kubectl get pods -A

      - name: Install MySQL
        working-directory: ./helm/mysql
        run: |
          helm repo add mysql-operator https://mysql.github.io/mysql-operator/
          helm repo update
          helm install mysql-operator mysql-operator/mysql-operator --version "2.1.3" --wait \
            --create-namespace --namespace=mysql-operator
          helm install mysql mysql-operator/mysql-innodbcluster --version "2.1.3" --wait \
            --create-namespace --namespace=mysql -f values.yaml
            --set-string credentials.root.password=${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Install stunner
        working-directory: ./scripts/localenv
        run: make install_stunner

      - name: Install game operator manifests
        working-directory: ./operator
        run: make install

      - name: Deploy game operator
        working-directory: ./operator
        run: make deploy IMG=${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.SUB_NAMESPACE }}/operator:${{ env.LABEL }}

      - name: Wait for MySQL to be ready
        run: |
          while true; do
            POD_STATUS=$(kubectl get pod mysql-0 -n mysql --no-headers -o custom-columns=":status.phase" 2>/dev/null);
            if [ "$POD_STATUS" ]; then
                echo "Pod mysql-0 has been created with status: $POD_STATUS";
                break;
            else
                echo "Waiting for pod mysql-0 to be created...";
                sleep 5;
            fi
          done
          kubectl wait --for=condition=Ready pod/mysql-0 -n mysql --timeout=120s
          
          while true; do
            POD_STATUS=$(kubectl get pod -l app.kubernetes.io/component=router -n mysql --no-headers -o custom-columns=":status.phase" 2>/dev/null); \
            if [ "$POD_STATUS" ]; then
                echo "MySQL router has been created with status: $POD_STATUS";
                break;
            else
                echo "Waiting for MySQL router to be created...";
                sleep 5;
            fi
          done
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=router -n mysql --timeout=120s

      - name: Install API
        working-directory: ./helm/api
        run: |
          helm install -f values.yaml \
            --set-string env.mysqlRootPassword=${{ secrets.MYSQL_ROOT_PASSWORD }} \
            --set-string env.azureTenantId=${{ secrets.AZURE_TENANT_ID }}
            --set-string env.azureClientId=${{ secrets.CLIENT_ID }}
            --set-string env.azureClientSecret=${{ secrets.CLIENT_SECRET }}
            --set-string env.azureStorageAccount=${{ secrets.AZURERM_STORAGE_ACCOUNT_NAME }}
            --set-string env.azureContainerName=${{ secrets.AZURERM_CONTAINER_NAME }}
            --set-string env.azureAksClusterName=${{ secrets.AZURERM_AKS_CLUSTER_NAME }}
            --set-string env.azurermSubscriptionId=${{ secrets.AZURERM_SUBSCRIPTION_ID }}
            --set-string env.azurermResourceGroupName=${{ secrets.AZURERM_RESOURCE_GROUP_NAME }}
            --set-string image.label=${{ env.LABEL }} \
            api .

      - name: Wait for external IP of API
        run: |
          until [ -n "$(kubectl get svc api -n api -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" ]; do
            sleep 5
          done

      - name: Install frontend
        working-directory: ./helm/frontend
        run: |
          helm install -f values.yaml \
            --set-string appConfig.apiUrl=http://$(kubectl get svc api -n api -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):$(kubectl get svc api -n api -o jsonpath='{.spec.ports[0].port}') \
            --set-string image.label=${{ env.LABEL }} \
            frontend .

      - name: Logout of Azure
        run: az logout
  purge:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.purge == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest


      - name: Login to Azure
        run: az login --service-principal -u ${{ secrets.CLIENT_ID }} -p ${{ secrets.CLIENT_SECRET }} --tenant ${{ secrets.AZURERM_TENANT_ID }}

      


      - name: Terraform Apply
        working-directory: ./iac
        run: |
          export ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
          export ARM_CLIENT_ID=${{ secrets.CLIENT_ID }}
          export TF_VAR_subscription_id=${{ secrets.AZURERM_SUBSCRIPTION_ID }}
          export TF_VAR_tenant_id=${{ secrets.AZURERM_TENANT_ID }}
          export TF_CLI_ARGS_init=" -backend-config=\"resource_group_name=${{ secrets.AZURERM_RESOURCE_GROUP_NAME }}\"  -backend-config=\"key=${{ secrets.KEY }}.tfstate\" -backend-config=\"storage_account_name=${{ secrets.AZURERM_STORAGE_ACCOUNT_NAME }}\"    -backend-config=\"container_name=tfbootstrapadmin\"   -backend-config=\"subscription_id=${{ secrets.AZURERM_SUBSCRIPTION_ID }}\"  -backend-config=\"tenant_id=${{ secrets.AZURERM_TENANT_ID }}\" "
          terraform init
          terraform plan -out=tfplan.bin -input=false
          terraform destroy -auto-approve
          terraform destroy -auto-approve 
          terraform destroy -auto-approve

      - name: Logout of Azure
        run: az logout